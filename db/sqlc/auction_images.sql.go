// Code generated by sqlc. DO NOT EDIT.
// source: auction_images.sql

package db

import (
	"context"
)

const createAuctionImage = `-- name: CreateAuctionImage :one

INSERT INTO auction_images (
    auction_id,
    url
)
VALUES (
           $1,
           $2
       )
    RETURNING
    id, auction_id, url
`

type CreateAuctionImageParams struct {
	AuctionID int32  `json:"auction_id"`
	Url       string `json:"url"`
}

// query.sql
func (q *Queries) CreateAuctionImage(ctx context.Context, arg CreateAuctionImageParams) (AuctionImage, error) {
	row := q.db.QueryRowContext(ctx, createAuctionImage, arg.AuctionID, arg.Url)
	var i AuctionImage
	err := row.Scan(&i.ID, &i.AuctionID, &i.Url)
	return i, err
}

const listAuctionImage = `-- name: ListAuctionImage :many
SELECT id, auction_id, url FROM auction_images
WHERE auction_id = $1
`

func (q *Queries) ListAuctionImage(ctx context.Context, auctionID int32) ([]AuctionImage, error) {
	rows, err := q.db.QueryContext(ctx, listAuctionImage, auctionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuctionImage{}
	for rows.Next() {
		var i AuctionImage
		if err := rows.Scan(&i.ID, &i.AuctionID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
