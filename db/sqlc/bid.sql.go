// Code generated by sqlc. DO NOT EDIT.
// source: bid.sql

package db

import (
	"context"
)

const createBid = `-- name: CreateBid :one
INSERT INTO bid (
    auction_id,
    user_id,
    price,
    status
)
VALUES (
       $1,
       $2,
       $3,
       $4
    )
    RETURNING
    id, auction_id, user_id, price, status, updated_at, created_at
`

type CreateBidParams struct {
	AuctionID int64 `json:"auction_id"`
	UserID    int64 `json:"user_id"`
	Price     int32 `json:"price"`
	Status    int32 `json:"status"`
}

// query.sql
func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) (Bid, error) {
	row := q.db.QueryRowContext(ctx, createBid,
		arg.AuctionID,
		arg.UserID,
		arg.Price,
		arg.Status,
	)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.AuctionID,
		&i.UserID,
		&i.Price,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getMaxBid = `-- name: GetMaxBid :one
SELECT MAX(price) FROM bid
WHERE auction_id = $1
`

func (q *Queries) GetMaxBid(ctx context.Context, auctionID int64) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getMaxBid, auctionID)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getTotalUserBid = `-- name: GetTotalUserBid :one
SELECT COUNT(*) FROM bid
WHERE auction_id = $1 AND user_id=$2
`

type GetTotalUserBidParams struct {
	AuctionID int64 `json:"auction_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) GetTotalUserBid(ctx context.Context, arg GetTotalUserBidParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalUserBid, arg.AuctionID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
