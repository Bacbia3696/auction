// Code generated by sqlc. DO NOT EDIT.
// source: register_auction_images.sql

package db

import (
	"context"
)

const createRegisterAuctionImage = `-- name: CreateRegisterAuctionImage :one

INSERT INTO register_auction_images (
    register_auction_id,
    url
)
VALUES (
           $1,
           $2
       )
    RETURNING
    id, register_auction_id, url
`

type CreateRegisterAuctionImageParams struct {
	RegisterAuctionID int64  `json:"register_auction_id"`
	Url               string `json:"url"`
}

// query.sql
func (q *Queries) CreateRegisterAuctionImage(ctx context.Context, arg CreateRegisterAuctionImageParams) (RegisterAuctionImage, error) {
	row := q.db.QueryRowContext(ctx, createRegisterAuctionImage, arg.RegisterAuctionID, arg.Url)
	var i RegisterAuctionImage
	err := row.Scan(&i.ID, &i.RegisterAuctionID, &i.Url)
	return i, err
}

const listRegisterAuctionImage = `-- name: ListRegisterAuctionImage :many
SELECT id, register_auction_id, url FROM register_auction_images
WHERE register_auction_id = $1
`

func (q *Queries) ListRegisterAuctionImage(ctx context.Context, registerAuctionID int64) ([]RegisterAuctionImage, error) {
	rows, err := q.db.QueryContext(ctx, listRegisterAuctionImage, registerAuctionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RegisterAuctionImage{}
	for rows.Next() {
		var i RegisterAuctionImage
		if err := rows.Scan(&i.ID, &i.RegisterAuctionID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
