// Code generated by sqlc. DO NOT EDIT.
// source: auction.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAuction = `-- name: CreateAuction :one
INSERT INTO auctions (
    title,
    description,
    code,
    owner,
    organization,
    info,
    address,
    register_start_date,
    register_end_date,
    bid_start_date,
    bid_end_date,
    start_price,
    step_price,
    status,
    type ,
    updated_at,
    created_at
)
VALUES (
       $1,
       $2,
       $3,
       $4,
       $5,
       $6,
       $7,
       $8,
       $9,
       $10,
       $11,
       $12,
       $13,
       $14,
       $15,
       $16,
       $17
         )
    RETURNING
    id, title, description, code, owner, organization, info, address, register_start_date, register_end_date, bid_start_date, bid_end_date, start_price, step_price, status, type, updated_at, created_at
`

type CreateAuctionParams struct {
	Title             string       `json:"title"`
	Description       string       `json:"description"`
	Code              string       `json:"code"`
	Owner             string       `json:"owner"`
	Organization      string       `json:"organization"`
	Info              string       `json:"info"`
	Address           string       `json:"address"`
	RegisterStartDate time.Time    `json:"register_start_date"`
	RegisterEndDate   time.Time    `json:"register_end_date"`
	BidStartDate      time.Time    `json:"bid_start_date"`
	BidEndDate        time.Time    `json:"bid_end_date"`
	StartPrice        int32        `json:"start_price"`
	StepPrice         int32        `json:"step_price"`
	Status            int32        `json:"status"`
	Type              int32        `json:"type"`
	UpdatedAt         sql.NullTime `json:"updated_at"`
	CreatedAt         time.Time    `json:"created_at"`
}

// query.sql
func (q *Queries) CreateAuction(ctx context.Context, arg CreateAuctionParams) (Auction, error) {
	row := q.db.QueryRowContext(ctx, createAuction,
		arg.Title,
		arg.Description,
		arg.Code,
		arg.Owner,
		arg.Organization,
		arg.Info,
		arg.Address,
		arg.RegisterStartDate,
		arg.RegisterEndDate,
		arg.BidStartDate,
		arg.BidEndDate,
		arg.StartPrice,
		arg.StepPrice,
		arg.Status,
		arg.Type,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Code,
		&i.Owner,
		&i.Organization,
		&i.Info,
		&i.Address,
		&i.RegisterStartDate,
		&i.RegisterEndDate,
		&i.BidStartDate,
		&i.BidEndDate,
		&i.StartPrice,
		&i.StepPrice,
		&i.Status,
		&i.Type,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAuctionById = `-- name: GetAuctionById :one
SELECT id, title, description, code, owner, organization, info, address, register_start_date, register_end_date, bid_start_date, bid_end_date, start_price, step_price, status, type, updated_at, created_at FROM auctions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuctionById(ctx context.Context, id int32) (Auction, error) {
	row := q.db.QueryRowContext(ctx, getAuctionById, id)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Code,
		&i.Owner,
		&i.Organization,
		&i.Info,
		&i.Address,
		&i.RegisterStartDate,
		&i.RegisterEndDate,
		&i.BidStartDate,
		&i.BidEndDate,
		&i.StartPrice,
		&i.StepPrice,
		&i.Status,
		&i.Type,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getByCode = `-- name: GetByCode :one
SELECT id, title, description, code, owner, organization, info, address, register_start_date, register_end_date, bid_start_date, bid_end_date, start_price, step_price, status, type, updated_at, created_at FROM auctions
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetByCode(ctx context.Context, code string) (Auction, error) {
	row := q.db.QueryRowContext(ctx, getByCode, code)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Code,
		&i.Owner,
		&i.Organization,
		&i.Info,
		&i.Address,
		&i.RegisterStartDate,
		&i.RegisterEndDate,
		&i.BidStartDate,
		&i.BidEndDate,
		&i.StartPrice,
		&i.StepPrice,
		&i.Status,
		&i.Type,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getListAuction = `-- name: GetListAuction :many
SELECT id, title, description, code, owner, organization, info, address, register_start_date, register_end_date, bid_start_date, bid_end_date, start_price, step_price, status, type, updated_at, created_at FROM auctions
WHERE ( code LIKE  $1 OR owner LIKE  $1 OR organization LIKE  $1 )
ORDER BY id ASC LIMIT $3 OFFSET $2
`

type GetListAuctionParams struct {
	Code   string `json:"code"`
	Offset int32  `json:"offset"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) GetListAuction(ctx context.Context, arg GetListAuctionParams) ([]Auction, error) {
	rows, err := q.db.QueryContext(ctx, getListAuction, arg.Code, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Auction{}
	for rows.Next() {
		var i Auction
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Code,
			&i.Owner,
			&i.Organization,
			&i.Info,
			&i.Address,
			&i.RegisterStartDate,
			&i.RegisterEndDate,
			&i.BidStartDate,
			&i.BidEndDate,
			&i.StartPrice,
			&i.StepPrice,
			&i.Status,
			&i.Type,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalAuction = `-- name: GetTotalAuction :one
SELECT COUNT(*) FROM auctions
WHERE ( code LIKE  $1 OR owner LIKE  $1 OR organization LIKE  $1)
`

func (q *Queries) GetTotalAuction(ctx context.Context, code string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalAuction, code)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateStatusAuction = `-- name: UpdateStatusAuction :one
UPDATE auctions
SET status = $1
WHERE  id = $2
    RETURNING
    id, title, description, code, owner, organization, info, address, register_start_date, register_end_date, bid_start_date, bid_end_date, start_price, step_price, status, type, updated_at, created_at
`

type UpdateStatusAuctionParams struct {
	Status int32 `json:"status"`
	ID     int32 `json:"id"`
}

func (q *Queries) UpdateStatusAuction(ctx context.Context, arg UpdateStatusAuctionParams) (Auction, error) {
	row := q.db.QueryRowContext(ctx, updateStatusAuction, arg.Status, arg.ID)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Code,
		&i.Owner,
		&i.Organization,
		&i.Info,
		&i.Address,
		&i.RegisterStartDate,
		&i.RegisterEndDate,
		&i.BidStartDate,
		&i.BidEndDate,
		&i.StartPrice,
		&i.StepPrice,
		&i.Status,
		&i.Type,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
