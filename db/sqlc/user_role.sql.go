// Code generated by sqlc. DO NOT EDIT.
// source: user_role.sql

package db

import (
	"context"
)

const createUserRole = `-- name: CreateUserRole :one

INSERT INTO user_role(
    UserId,
    RoleId
)
VALUES (
    $1,
    $2
       )
    RETURNING
    id, userid, roleid
`

type CreateUserRoleParams struct {
	Userid int32 `json:"userid"`
	Roleid int32 `json:"roleid"`
}

// query.sql
func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, createUserRole, arg.Userid, arg.Roleid)
	var i UserRole
	err := row.Scan(&i.ID, &i.Userid, &i.Roleid)
	return i, err
}

const getRoleByUserId = `-- name: GetRoleByUserId :one
SELECT RoleId FROM user_role
WHERE UserId = $1 LIMIT 1
`

func (q *Queries) GetRoleByUserId(ctx context.Context, userid int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getRoleByUserId, userid)
	var roleid int32
	err := row.Scan(&roleid)
	return roleid, err
}
